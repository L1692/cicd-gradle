pipeline {

    agent any

    stages {
        stage('Build') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
            }
            steps {
                jacoco()
                sh "gradle build"
                withSonarQubeEnv('sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Test: Integration and Quality') {
            steps {
                echo 'Insert something here'
            }
        }
        stage('Test: Functional') {
            steps {
                echo 'Insert something here'
            }
        }
        stage('Test: Load & Security') {
            steps {
                sh "gradle gatlingRun"
            }
        }
        stage('Approval') {
            steps {
                echo 'Insert something here'
            }
        }
        stage('Deploy: Prod') {
            steps {
                script {
                    docker.build("195360077735.dkr.ecr.eu-west-1.amazonaws.com/cicdapp")
                    docker.withRegistry("https://195360077735.dkr.ecr.eu-west-1.amazonaws.com", "ecr:eu-west-1:bebe28a3-ed63-4acb-8a04-9e9174628b5f") {
                      docker.image("195360077735.dkr.ecr.eu-west-1.amazonaws.com/cicdapp").push("latest")
                    }
                }
                withKubeConfig([credentialsId: 'kubernetes-deployer', serverUrl: 'https://api-cicd-k8s-local-gtgus3-1195838833.eu-west-1.elb.amazonaws.com']) {
                    sh "kubectl config set-cluster cicd.k8s.local --server=https://api-cicd-k8s-local-gtgus3-1195838833.eu-west-1.elb.amazonaws.com"
                    sh "kubectl config set-context cicd.k8s.local --cluster=cicd.k8s.local --user=admin"
                    sh "kubectl config use-context cicd.k8s.local"
                    sh "kubectl config set-credentials cicd.k8s.local-basic-auth --username=admin --password=Z1dTDoK8h9w2hoFMa1kvw2pnV96mxD4Q"
                    sh "kubectl config view"
                    sh "/usr/local/bin/kubectl delete services cicdapp"
                    sh "/usr/local/bin/kubectl delete deployment cicdapp"
                    sh "sudo docker rmi \$(sudo docker images -f dangling=true -q)"
                    sh "sudo \$(aws ecr get-login --region eu-west-1 --no-include-email)"
                    sh "/usr/local/bin/kubectl run cicdapp --image=195360077735.dkr.ecr.eu-west-1.amazonaws.com/cicdapp:latest --port=80"
                    sh "/usr/local/bin/kubectl expose deployment cicdapp --type='LoadBalancer'"
                }
            }
        }
    }
}